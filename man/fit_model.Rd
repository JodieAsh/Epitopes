% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_model.R
\name{fit_model}
\alias{fit_model}
\title{Fit Random Forest model to epitope data}
\usage{
fit_model(
  peptides.list,
  threshold = 0.5,
  holdout.split = NULL,
  CV.folds = NULL,
  sample.rebalancing = "undersampling",
  use.global.features = ifelse(peptides.list$splits.attrs$split_level == "protein", TRUE,
    FALSE),
  return.model = "full",
  ncpus = 1,
  rnd.seed = NULL,
  ...
)
}
\arguments{
\item{peptides.list}{data frame containing the training data (one or more
numerical predictors and one \strong{Class} attribute).}

\item{threshold}{probability threshold for attributing a prediction as
\emph{positive}.}

\item{holdout.split}{name of split to be used as a holdout set. If \code{NULL}
then the full data is used for training. Ignored if \code{CV.folds} is not \code{NULL}.}

\item{CV.folds}{vector with the names of the splits to be used for cross validation.
If \code{NULL} no cross-validation is performed.}

\item{sample.rebalancing}{character: should the model try to compensate class
imbalances during training? See \strong{Dealing with class imbalance} for details.}

\item{use.global.features}{logical: should global features (potentially
available in \code{peptides.list$proteins}) be used? Should be left as the default
unless the user knows exactly what they're doing. See \strong{Details}.}

\item{return.model}{model to be returned. Accepts \code{"full"} (return model
trained on the full data); \code{"partial"} (model trained on all data except the
holdout split; or on the set of data specified in all CV folds); or \code{"none"}
(does not return a model).}

\item{ncpus}{number of cores to use.}

\item{rnd.seed}{seed for random number generator.}

\item{...}{other options to be passed down to \code{\link[ranger:ranger]{ranger::ranger()}}.}
}
\value{
List containing the fitted model and several performance indicators.
}
\description{
Fits a Random Forest model to epitope data, using the data splits and
previously calculated using \code{\link[=make_data_splits]{make_data_splits()}}.
}
\details{
Function \code{\link[=make_data_splits]{make_data_splits()}} defines data splits based on (protein or
peptide) similarity. The split identifiers are stored in
\code{peptides.list$df$Info_split}.
}
\section{Dealing with class imbalance}{

Parameter \code{sample.rebalancing} regulates how the modelling routine attempts
to compensate class imbalances. The following strategies are available:
\itemize{
\item \code{"undersampling"} (default) : stratified undersampling of the
majority class. The undersampling is performed in a
manner that retains at least some observations related to each peptide
from the majority class (plus all observations from the minority class).
\item \code{"by_tree"}: sets the parameter \code{case.weights} of
\code{\link[ranger:ranger]{ranger::ranger()}} to give each observation a sampling probability
inversely proportional to its class prevalence.
\item any other value: no rebalancing is done.
}
}

\section{Performance assessment}{

This function has the following modes of performance assessment:

\itemize{
\item If both \emph{holdout.split} and \emph{CV.folds} are \code{NULL}, no performance
assessment is done. A model is fit on the full data and returned.
\item If \emph{holdout.split} is the valid name of a data split in
\code{peptides.list$df$Info_split} \strong{AND} \emph{CV.folds} is \code{NULL}, a model is
trained on the full data except the \emph{holdout.split} and then applied to
predict the labels for \emph{holdout.split}. The performance returned
corresponds to the performance on \emph{holdout.split}.
\item If \emph{CV.folds} is a vector of valid names of data splits in
\code{peptides.list$df$Info_split}, the splits named are used as
cross-validation folds. The performance returned
corresponds to the average cross-validation performance using the
\emph{CV.folds}. If \emph{CV.folds} is not \code{NULL} the value of
\emph{holdout.split} is ignored.
}

\strong{IMPORTANT}: by default, the model returned by this routine is a model
trained on the \strong{full data} (fit after the performance is assessed on
holdout splits or on cross-validation folds). This can be regulated by
parameter \code{return.model}.
}

\author{
Felipe Campelo (\email{f.campelo@aston.ac.uk})
}
